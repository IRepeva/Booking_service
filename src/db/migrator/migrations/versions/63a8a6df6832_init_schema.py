"""init schema

Revision ID: 63a8a6df6832
Revises:
Create Date: 2023-01-29 16:08:21.309805

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import postgresql

from db.tables.booking import BookingStatus
from db.tables.seat import SeatType

# revision identifiers, used by Alembic.
revision = "63a8a6df6832"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "guest",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "host",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "location",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("name", sa.String(), nullable=True, comment="location name"),
        sa.Column(
            "coordinates", sa.String(), nullable=False, comment="location location"
        ),
        sa.Column("capacity", sa.Integer(), nullable=False, comment="Number of seats"),
        sa.Column("open", sa.Time(), nullable=False, comment="location opening time"),
        sa.Column("close", sa.Time(), nullable=False, comment="location closing time"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "purchased_movie",
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("movie_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("movie_name", sa.String(), nullable=True),
        sa.Column("release_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("movie_id"),
    )
    op.create_table(
        "event",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("start", sa.DateTime(), nullable=False),
        sa.Column(
            "duration", sa.Integer(), nullable=False, comment="Event duration, s"
        ),
        sa.Column("notes", sa.String(), nullable=False, comment="Extra information"),
        sa.Column(
            "participants",
            sa.Integer(),
            nullable=False,
            comment="Number of participants",
        ),
        sa.Column("movie_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("location_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("host_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["host_id"], ["host.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["location_id"], ["location.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "purchased_movies",
        sa.Column("host_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("purchased_movie_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["host_id"], ["host.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["purchased_movie_id"], ["purchased_movie.movie_id"], ondelete="CASCADE"
        ),
    )
    op.create_table(
        "seat",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.Column("row", sa.Integer(), nullable=True),
        sa.Column("seat", sa.Integer(), nullable=True),
        sa.Column(
            "type",
            sqlalchemy_utils.types.choice.ChoiceType(
                choices=SeatType, impl=sa.Integer()
            ),
            nullable=False,
            default=SeatType.UNKNOWN,
        ),
        sa.Column("location_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["location_id"], ["location.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "booking",
        sa.Column("seat_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("event_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("guest_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "status",
            sqlalchemy_utils.types.choice.ChoiceType(
                choices=BookingStatus, impl=sa.Integer()
            ),
            nullable=False,
            default=BookingStatus.EMPTY,
        ),
        sa.Column("price", sa.Float(), nullable=True),
        sa.Column(
            "modified",
            sa.DateTime(),
            nullable=True,
            default=sa.sql.func.now(),
            onupdate=sa.sql.func.now(),
        ),
        sa.Column("created", sa.DateTime(), nullable=True, default=sa.sql.func.now()),
        sa.ForeignKeyConstraint(["event_id"], ["event.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["guest_id"], ["guest.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["seat_id"], ["seat.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("seat_id", "event_id", "guest_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("booking")
    op.drop_table("seat")
    op.drop_table("purchased_movies")
    op.drop_table("event")
    op.drop_table("purchased_movie")
    op.drop_table("location")
    op.drop_table("host")
    op.drop_table("guest")
    # ### end Alembic commands ###
